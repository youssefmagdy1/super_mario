/* autogenerated by Processing revision 1277 on 2021-12-23 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.Arrays;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class super_mario extends PApplet {

int x ; 
GameObj test , test2 ;
GameObj[] arr = new GameObj[10] ; 

 public void setup() {
    /* size commented out by preprocessor */;
    // PImage = loadImage("superMario.jpeg");
     test = new GameObj(20 ,20,true,"superMario.jpeg" , 50 , 50 ) ; 
     test2 = new GameObj(60 ,500,true,"superMario.jpeg" , 50 , 50 ) ; 
     arr[0] = test2 ;
}

 public void draw() {
    background(0, 0, 0);
    test.draw(0,10);
    test2.draw(0,0);

    // print(arr) ;
    switch(test.is_intersect(arr))
    {
        case 1 :
            background(255, 0, 0);
            print(1) ;
            break ;
        case 2 :
            background(255, 255, 0);
            print(2) ;
            break ;
        case 3 :
            background(255, 255, 255);
            print(3) ;
            break ;
        case 4 :
            background(0, 255, 0);
            print(4) ;
            break ;
        case -1 :
            // background(50, 5, 0);
            print(5) ;
                break ;
        default :
            print(6) ;
            // background(0, 0, 0);
            break;	


    }
    // image(test.img, 20+x, 20, 20, 20);

    // x+= 10 ; 

}
  

class GameObj {

    public PImage img ;
    protected int x_pos , y_pos ;
    protected char dir ;
    protected float img_scale ;
    public boolean is_move , is_vis; 
    

    public GameObj(int _x , int _y , boolean _is_move , String img, int h , int w)
    {
        this.set_coordintes(_x,_y ); 
        this.is_move = _is_move ; 
        this.change_photo(img) ; 
        this.resize(h,w) ;

        // this.set_height(height);
        // this.set_width(width) ; 


    }
     public void  set_coordintes(int _x , int _y )
    {
        this.x_pos = _x ;
        this.y_pos = _y ;
    }

    
    // method to set position and get 
     public int get_x()
    {
        return this.x_pos  ;
    }
     public void set_x(int x)
    {
        this.x_pos =x ; 
    }
     public void set_y(int y)
    {
        this.y_pos =y ; 
    }
     public int get_y()
    {
        return this.y_pos  ;
    }

    // method used in resize and get demention 
     public int get_height()
    {
        return this.img.height ;
    }
     public int get_width()
    {
        return this.img.width ;
    }
     public void resize(int x , int y )
    {
        this.img.resize(x,y) ; 
    }


     public void change_photo(String  _img )
    {
        this.img = loadImage(_img) ; 
    }

    /* check if intersect 
        1=> form bottom 
        2=> from top 
        3=> from right
        4=> from left 
        -1 =>  didn't intersect  
    */
     public int is_intersect (GameObj[] objects_array)
    {
        int temp =-1 ;
        for(GameObj obj : objects_array)
        {
            if(obj != null)
            {
                temp = Intersect.check(this , obj) ;
                if (temp > 0 )
                    break ;  
            }         
        }
        return temp ;
    } 
    

    // method to draw how much the object will move in x dir and y dir 
     public void draw (int x , int y )
    {
        this.set_x(this.get_x() + x);
        this.set_y(this.get_y() + y);

        image(this.img , this.get_x() , this.get_y() , this.get_height() , this.get_width()) ; 
    }


}
static class Intersect{

     public static int check (GameObj obj1 , GameObj obj2 )
    {
       int obj1_x = obj1.get_x()  ,
           obj1_y = obj1.get_y() ,
           obj1_h = obj1.get_height() ,
           obj1_w = obj1.get_width() ;

       int obj2_x = obj2.get_x()  ,
           obj2_y = obj2.get_y() ,
           obj2_h = obj2.get_height() ,
           obj2_w = obj2.get_width() ;


        

        //down
        // obj1 hit obj2 from bottom 
        if(  obj1_y+obj1_h == obj2_y 
            &&( (obj1_x >= obj2_x && obj1_x <= obj2_x+obj2_w  ) 
                ||( obj1_x+obj1_w >= obj2_x && obj1_x+obj1_w <= obj2_x+obj2_w  ) 
            )
        ) 
            return 1 ;

        // up  
        else if(  obj1_y == obj2_y +obj2_h
            &&( (obj1_x >= obj2_x && obj1_x <= obj2_x+obj2_w  ) 
                ||( obj1_x+obj1_w >= obj2_x && obj1_x+obj1_w <= obj2_x+obj2_w  ) 
            )
        ) 
            return 2 ;

        // left 
        else if ( obj1_x == obj2_x 
            &&(   (obj1_y >= obj2_y && obj1_y <= obj2_y+obj2_h  ) 
                ||( obj1_y+obj1_h >= obj2_y && obj1_y+obj1_h <= obj2_y+obj2_h  ) 
            )
        )
            return 3 ;


        //right 
        else if ( obj1_x == obj2_x +obj2_w
            &&(   (obj1_y >= obj2_y && obj1_y <= obj2_y+obj2_h  ) 
                ||( obj1_y+obj1_h >= obj2_y && obj1_y+obj1_h <= obj2_y+obj2_h  ) 
            )
        )
            return 4 ;  


        else 
            return -1 ;
        
        


    }


}


  public void settings() { size(512, 512); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "super_mario" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
